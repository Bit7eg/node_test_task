import logger from "#utils/logger.js";
import env from "#config/env/env.js";
import schedulerService from "#services/scheduler.js";
import { TariffsDataToSave } from "#types/wb-tariffs.js";

async function testAll() {
    try {
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        
        // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üìã 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
        logger.info(`   - NODE_ENV: ${env.NODE_ENV || 'development'}`);
        logger.info(`   - WB_API_URL: ${env.WB_API_URL}`);
        logger.info(`   - SCHEDULER_INTERVAL_HOURS: ${env.SCHEDULER_INTERVAL_HOURS}`);
        logger.info("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
        
        // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...");
        const mockData: TariffsDataToSave = {
            request: {
                request_date: new Date(),
                dt_next_box: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                dt_till_max: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            },
            warehouses: [
                {
                    warehouse_name: "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥",
                    box_delivery_base: 50.0,
                    box_delivery_liter: 12.0,
                    box_storage_base: 0.1,
                    box_storage_liter: 0.1,
                }
            ],
        };
        logger.info(`   - –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å ${mockData.warehouses.length} —Å–∫–ª–∞–¥–æ–º`);
        logger.info("   ‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        
        // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logger.info("‚è∞ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...");
        const initialInfo = schedulerService.getSchedulerInfo();
        logger.info(`   - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialInfo.isRunning ? '–∑–∞–ø—É—â–µ–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        
        schedulerService.start();
        const runningInfo = schedulerService.getSchedulerInfo();
        logger.info(`   - –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: ${runningInfo.isRunning ? '–∑–∞–ø—É—â–µ–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        
        schedulerService.stop();
        const stoppedInfo = schedulerService.getSchedulerInfo();
        logger.info(`   - –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${stoppedInfo.isRunning ? '–∑–∞–ø—É—â–µ–Ω' : '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        logger.info("   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        
        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üìù 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...");
        logger.debug("   - Debug —Å–æ–æ–±—â–µ–Ω–∏–µ");
        logger.info("   - Info —Å–æ–æ–±—â–µ–Ω–∏–µ");
        logger.warn("   - Warning —Å–æ–æ–±—â–µ–Ω–∏–µ");
        logger.error("   - Error —Å–æ–æ–±—â–µ–Ω–∏–µ");
        logger.info("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        logger.info("üìÅ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...");
        const fs = await import('fs');
        const path = await import('path');
        
        const logsDir = path.join(process.cwd(), 'logs');
        const logFile = path.join(logsDir, 'app.log');
        
        if (fs.existsSync(logsDir)) {
            logger.info("   - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        } else {
            logger.warn("   - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        
        if (fs.existsSync(logFile)) {
            const stats = fs.statSync(logFile);
            logger.info(`   - –§–∞–π–ª –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
        } else {
            logger.warn("   - –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        logger.info("   ‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");
        
        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info("üîß 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...");
        const requiredVars = [
            'POSTGRES_DB',
            'POSTGRES_USER', 
            'POSTGRES_PASSWORD',
            'WB_API_URL',
            'SCHEDULER_INTERVAL_HOURS'
        ];
        
        let allVarsOk = true;
        requiredVars.forEach(varName => {
            const value = env[varName as keyof typeof env];
            if (!value) {
                logger.warn(`   - ${varName}: –Ω–µ –∑–∞–¥–∞–Ω`);
                allVarsOk = false;
            } else {
                logger.info(`   - ${varName}: ${varName.includes('PASSWORD') ? '***' : value}`);
            }
        });
        
        if (allVarsOk) {
            logger.info("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã");
        } else {
            logger.warn("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã");
        }
        
        logger.info("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
        logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
        logger.info("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç");
        logger.info("   ‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - —Ä–∞–±–æ—Ç–∞—é—Ç");
        logger.info("   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç");
        logger.info("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç");
        logger.info("   ‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç");
        logger.info("   ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        
        if (!env.WB_API_KEY) {
            logger.warn("   ‚ö†Ô∏è API –∫–ª—é—á WB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API WB –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å WB_API_KEY –≤ .env");
        }
        
    } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAll(); 