import knex from '#postgres/knex.js';
import googleSheetsService from '#services/google-sheets.js';
import exportService from '#services/export-service.js';
import logger from '#utils/logger.js';

async function testGoogleSheetsWithExistingData() {
    try {
        logger.info('üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets API
        logger.info('üìã 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API...');
        await googleSheetsService.initialize();
        logger.info('   ‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        logger.info('üîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');
        
        const requestCount = await knex('wb_tariffs_box_requests').count('* as count');
        const warehouseCount = await knex('wb_tariffs_box_warehouses').count('* as count');
        const spreadsheetCount = await knex('spreadsheets').count('* as count');

        logger.info(`   - –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: ${requestCount[0].count}`);
        logger.info(`   - –°–∫–ª–∞–¥–æ–≤ –≤ –ë–î: ${warehouseCount[0].count}`);
        logger.info(`   - Google —Ç–∞–±–ª–∏—Ü –≤ –ë–î: ${spreadsheetCount[0].count}`);

        // 3. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        if (parseInt(requestCount[0].count as string) === 0) {
            logger.info('üìä 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É)
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const requestDate = yesterday.toISOString().split('T')[0];
            
            const [requestResult] = await knex('wb_tariffs_box_requests').insert({
                request_date: requestDate,
                dt_next_box: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                dt_till_max: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            }).returning('id');

            const requestId = requestResult.id;
            logger.info(`   - –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å —Å ID: ${requestId}`);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã
            const testWarehouses = [
                {
                    request_id: requestId,
                    warehouse_name: '–°–∫–ª–∞–¥ –ú–æ—Å–∫–≤–∞',
                    box_delivery_and_storage_expr: 150.0,
                    box_delivery_base: 45.0,
                    box_delivery_liter: 10.5,
                    box_storage_base: 0.1,
                    box_storage_liter: 0.1,
                },
                {
                    request_id: requestId,
                    warehouse_name: '–°–∫–ª–∞–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                    box_delivery_and_storage_expr: 120.0,
                    box_delivery_base: 40.0,
                    box_delivery_liter: 8.0,
                    box_storage_base: 0.08,
                    box_storage_liter: 0.08,
                },
                {
                    request_id: requestId,
                    warehouse_name: '–°–∫–ª–∞–¥ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
                    box_delivery_and_storage_expr: 180.0,
                    box_delivery_base: 50.0,
                    box_delivery_liter: 12.0,
                    box_storage_base: 0.12,
                    box_storage_liter: 0.12,
                },
                {
                    request_id: requestId,
                    warehouse_name: '–°–∫–ª–∞–¥ –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞',
                    box_delivery_and_storage_expr: null,
                    box_delivery_base: 35.0,
                    box_delivery_liter: 7.0,
                    box_storage_base: 0.05,
                    box_storage_liter: 0.05,
                }
            ];

            await knex('wb_tariffs_box_warehouses').insert(testWarehouses);
            logger.info(`   - –î–æ–±–∞–≤–ª–µ–Ω–æ ${testWarehouses.length} —Å–∫–ª–∞–¥–æ–≤`);
        } else {
            logger.info('   ‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î');
        }

        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        logger.info('üì§ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—ã...');
        const exportResults = await exportService.exportLatestTariffs();
        
        logger.info(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: ${exportResults.length} —Ç–∞–±–ª–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
        
        if (exportResults.length > 0) {
            const successCount = exportResults.filter(r => r.success).length;
            const errorCount = exportResults.filter(r => !r.success).length;
            
            logger.info(`   - –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
            
            exportResults.forEach((result, index) => {
                if (result.success) {
                    logger.info(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${result.spreadsheetId}: ${result.rowsUpdated} —Å—Ç—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
                } else {
                    logger.error(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${result.spreadsheetId}: ${result.error}`);
                }
            });
        } else {
            logger.warn('   ‚ö†Ô∏è –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É spreadsheets)');
        }

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info('üìã 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        const latestTariffs = await exportService['getLatestTariffs']();
        
        if (latestTariffs) {
            const exportData = exportService['prepareExportData'](latestTariffs.warehouses);
            logger.info(`   - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${exportData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info('   - –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:');
            exportData.forEach((data, index) => {
                logger.info(`     ${index + 1}. ${data.warehouse_name} - –ö–æ—ç—Ñ: ${data.box_delivery_and_storage_expr || 'N/A'}`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            const sortedCoeffs = exportData
                .filter(d => d.box_delivery_and_storage_expr !== null)
                .map(d => d.box_delivery_and_storage_expr as number);
            
            const isSorted = sortedCoeffs.every((val, i) => i === 0 || val >= sortedCoeffs[i - 1]);
            logger.info(`   - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É: ${isSorted ? '‚úÖ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : '‚ùå –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const hasUpdateDate = exportData.every(d => d.last_updated);
            logger.info(`   - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${hasUpdateDate ? '‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–∞' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        }

        logger.info('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        logger.info('   ‚úÖ Google Sheets API - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        logger.info('   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î - –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
        logger.info('   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –≤—ã–ø–æ–ª–Ω–µ–Ω');
        logger.info('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', error);
        process.exit(1);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await knex.destroy();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGoogleSheetsWithExistingData();